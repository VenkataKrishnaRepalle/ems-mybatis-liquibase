<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.learning.emsmybatisliquibase.dao.ExperienceDao">
    <resultMap id="experienceStructure" type="com.learning.emsmybatisliquibase.entity.Experience">
        <id property="uuid" column="uuid" javaType="java.util.UUID" jdbcType="VARCHAR"
            typeHandler="com.learning.emsmybatisliquibase.handler.UuidTypeHandler"/>
        <result property="employeeUuid" column="employee_uuid" javaType="java.util.UUID" jdbcType="VARCHAR"
                typeHandler="com.learning.emsmybatisliquibase.handler.UuidTypeHandler"/>
        <result property="companyName" column="company_name"/>
        <result property="location" column="location"/>
        <result property="description" column="description"/>
        <result property="isCurrentJob" column="is_current_job"/>
        <result property="startDate" column="start_date"/>
        <result property="endDate" column="end_date"/>
    </resultMap>

    <select id="getById" resultMap="experienceStructure">
        select *
        from experience
        where uuid = #{uuid}
    </select>

    <select id="getByEmployeeUuid" resultMap="experienceStructure">
        select *
        from experience
        where employee_uuid = #{employeeUuid}
    </select>

    <insert id="insert" flushCache="true">
        insert into experience (uuid, employee_uuid, company_name, location, description, start_date, end_date,
                                is_current_job)
        values (#{experience.uuid}, #{experience.employeeUuid}, #{experience.companyName}, #{experience.location},
                #{experience.description}, #{experience.startDate}, #{experience.endDate}, #{experience.isCurrentJob})
    </insert>

    <update id="update" flushCache="true">
        update experience
        set employee_uuid  = #{experience.employeeUuid},
            company_name   = #{experience.companyName},
            location       = #{experience.location},
            description    = #{experience.description},
            start_date     = #{experience.startDate},
            end_date       = #{experience.endDate},
            is_current_job = #{experience.isCurrentJob}
        where uuid = #{experience.uuid}
    </update>

    <delete id="delete" flushCache="true">
        delete
        from experience
        where uuid = #{uuid}
    </delete>
</mapper>