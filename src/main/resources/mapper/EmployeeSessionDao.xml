<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.learning.emsmybatisliquibase.dao.EmployeeSessionDao">
    <resultMap id="employeeSessionResult" type="com.learning.emsmybatisliquibase.entity.EmployeeSession">
        <id property="uuid" column="uuid" javaType="java.util.UUID" jdbcType="VARCHAR"
            typeHandler="com.learning.emsmybatisliquibase.handler.UuidTypeHandler"/>
        <result property="employeeUuid" column="employee_uuid" javaType="java.util.UUID" jdbcType="VARCHAR"
                typeHandler="com.learning.emsmybatisliquibase.handler.UuidTypeHandler"/>
        <result property="token" column="token"/>
        <result property="browserName" column="browser_name"/>
        <result property="osName" column="os_name"/>
        <result property="platform" column="platform"/>
        <result property="location" column="location"/>
        <result property="isActive" column="is_active"/>
        <result property="loginTime" column="login_timestamp"/>
    </resultMap>

    <select id="getByEmployeeUuid" resultMap="employeeSessionResult">
        SELECT *
        FROM employee_session
        WHERE employee_uuid = #{employeeUuid}
    </select>

    <insert id="insert" flushCache="true">
        INSERT INTO employee_session(uuid, employee_uuid, browser_name, token, os_name, platform, location, is_active,
                                     login_timestamp)
        VALUES (#{session.uuid}, #{session.employeeUuid}, #{session.browserName}, #{session.token}, #{session.osName},
                #{session.platform}, #{session.location}, #{session.isActive}, #{session.loginTime})
    </insert>

    <update id="update" flushCache="true">
        UPDATE employee_session
        SET employee_uuid = #{session.employeeUuid},
            token         = #{session.token},
            browser_name  = #{session.browserName},
            os_name       = #{session.osName},
            platform      = #{session.location},
            is_active     = #{session.isActive}
        where uuid = #{session.uuid}
    </update>

    <delete id="delete" flushCache="true">
        DELETE
        FROM employee_session
        WHERE uuid = #{uuid}
    </delete>

</mapper>