<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.learning.emsmybatisliquibase.dao.CycleDao">
    <resultMap id="cycleStructure" type="com.learning.emsmybatisliquibase.entity.Cycle">
        <id property="uuid" column="uuid" javaType="java.util.UUID" jdbcType="VARCHAR"
            typeHandler="com.learning.emsmybatisliquibase.handler.UuidTypeHandler"/>
        <result property="name" column="name"/>
        <result property="description" column="description"/>
        <result property="startTime" column="start_time"/>
        <result property="endTime" column="end_time"/>
        <result property="status" column="status"/>
        <result property="createdBy" column="created_by" javaType="java.util.UUID" jdbcType="VARCHAR"
                typeHandler="com.learning.emsmybatisliquibase.handler.UuidTypeHandler"/>
        <result property="createdTime" column="created_time"/>
        <result property="updatedTime" column="updated_time"/>
    </resultMap>

    <select id="getById" resultMap="cycleStructure">
        select * from cycle where uuid = #{uuid}
    </select>

    <select id="getByStatus" resultMap="cycleStructure">
        select *
        from cycle
        where status = #{status}
    </select>

    <select id="getAll" resultMap="cycleStructure">
        select *
        from cycle
    </select>

    <insert id="insert" flushCache="true">
        INSERT INTO cycle (uuid, name, description, start_time, end_time, status, created_by, created_time,
                           updated_time)
        VALUES (#{cycle.uuid}, #{cycle.name}, #{cycle.description}, #{cycle.startTime}, #{cycle.endTime},
                #{cycle.status}, #{cycle.createdBy}, current_timestamp, current_timestamp)
    </insert>

    <update id="update" flushCache="true">
        UPDATE cycle
        SET name         = #{cycle.name},
            description  = #{cycle.description},
            start_time   = #{cycle.startTime},
            end_time     = #{cycle.endTime},
            status       = #{cycle.status},
            created_by   = #{cycle.createdBy},
            updated_time = current_timestamp
        where uuid = #{cycle.uuid}
    </update>
</mapper>